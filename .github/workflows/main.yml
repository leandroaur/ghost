name: nomad-pack

on:
  push:
    paths:
      - 'ghost.nomad'
      - 'images/**'

jobs:
  setup-nomad-pack:
    runs-on: ubuntu-latest
    name: Run Nomad Pack
    env:
      NOMAD_ADDR: "https://nomad.leandroaurelio.com"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Nomad CLI
        run: |
          echo "Instalando Nomad CLI..."
          curl -fsSL https://releases.hashicorp.com/nomad/1.9.4/nomad_1.9.4_linux_amd64.zip -o nomad.zip
          unzip nomad.zip
          sudo mv nomad /usr/local/bin/
          nomad --version

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          IMAGE_TAG="leandroaurelio/ghost:${{ github.run_number }}"
          docker build -t $IMAGE_TAG .
          docker push $IMAGE_TAG

          # Tag the image as 'latest'
          docker tag $IMAGE_TAG leandroaurelio/ghost:latest
          docker push leandroaurelio/ghost:latest

      - name: Replace Variables for Deploy
        run: |
          if [[ "${{ github.ref_name }}" == "bench" ]]; then
            NAMESPACE="${{ secrets.BENCH_NAMESPACE }}"
            SITE_URL="${{ secrets.BENCH_SITE_URL }}"
            PORT="${{ secrets.BENCH_PORT }}"
          elif [[ "${{ github.ref_name }}" == "master" ]]; then
            NAMESPACE="${{ secrets.PROD_NAMESPACE }}"
            SITE_URL="${{ secrets.PROD_SITE_URL }}"
            PORT="${{ secrets.PROD_PORT }}"
          else
            echo "Branch não reconhecida. Abortando."
            exit 1
          fi
  
          # Substituir os placeholders no arquivo ghost.nomad
          sed -i "s|__NAMESPACE__|$NAMESPACE|g" ghost.nomad
          sed -i "s|__SITE_URL__|$SITE_URL|g" ghost.nomad
          sed -i "s|__PORT__|$PORT|g" ghost.nomad

      - name: Substitute placeholders with secrets
        run: |
          sed -i "s|__USER_MAIL__|${{ secrets.USER_MAIL }}|g" ghost.nomad
          sed -i "s|__USER_PASSWORD__|${{ secrets.USER_PASSWORD }}|g" ghost.nomad
          sed -i "s|__MYSQL_ROOT_PASSWORD__|${{ secrets.MYSQL_ROOT_PASSWORD }}|g" ghost.nomad
          sed -i "s|__MYSQL_DATABASE__|${{ secrets.MYSQL_DATABASE }}|g" ghost.nomad
          sed -i "s|__MYSQL_USER__|${{ secrets.MYSQL_USER }}|g" ghost.nomad
          sed -i "s|__MYSQL_PASSWORD__|${{ secrets.MYSQL_PASSWORD }}|g" ghost.nomad

      - name: Plan job and capture Job Modify Index
        id: plan
        run: |
          INDEX=$(nomad job plan ghost.nomad | awk '/Job Modify Index/ {print $4}')
          if [[ -z "$INDEX" ]]; then
            echo "Erro: Não foi possível capturar o Job Modify Index."
            exit 1
          fi
          echo "INDEX=$INDEX" >> $GITHUB_ENV

      - name: Deploy job and capture Deployment ID
        run: |
          echo "Iniciando o deploy..."
            
          # Executa o deploy e captura a saída
          OUTPUT=$(nomad job run -namespace=$NAMESPACE -check-index ${{ env.INDEX }} ghost.nomad || echo "Erro transitório ignorado")
          echo "Saída do comando: $OUTPUT"

          # Captura o Deployment ID, verificando tanto sucesso quanto falhas transitórias
          DEPLOYMENT_ID=$(echo "$OUTPUT" | grep -oP '(?<=Monitoring deployment ")[^"]+')
            
          if [[ -z "$DEPLOYMENT_ID" ]]; then
            echo "Erro: Não foi possível capturar o Deployment ID."
            exit 1
          fi
  
          echo "Deployment ID capturado: $DEPLOYMENT_ID"
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> $GITHUB_ENV
          
          echo "Aguardando o registro do deployment..."
          sleep 60
  

      - name: Monitor deployment status
        run: |
          echo "Verificando status do deployment ID: $DEPLOYMENT_ID ou ${{ env.DEPLOYMENT_ID }}"
          TIMEOUT=300
          INTERVAL=5
          ELAPSED=0
          while true; do
            echo "Saída completa do comando 'nomad deployment status':"
            nomad deployment status -namespace=$NAMESPACE $DEPLOYMENT_ID || echo "Erro ao executar o comando."
            STATUS=$(bash -c "nomad deployment status -namespace=$NAMESPACE $DEPLOYMENT_ID -t {{ .Status }}")
            if [[ "$STATUS" == "successful" ]]; then
              echo "Deployment concluído com sucesso!"
              break
              elif [[ "$STATUS" == "" ]]; then
              echo "Aviso: Não foi possível capturar o status do deployment. Tentando novamente..."
            else
              echo "Aguardando o deployment ser concluído... Status atual: $STATUS"
            fi

            # Incrementar o tempo decorrido
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))

            # Verificar se o timeout foi alcançado
            if (( ELAPSED >= TIMEOUT )); then
              echo "Erro: Tempo limite de $TIMEOUT segundos atingido. Deployment não foi concluído."
              exit 1
            fi
          done

      - name: Display job status
        run: |
          nomad status -namespace=$NAMESPACE ghost-$NAMESPACE
